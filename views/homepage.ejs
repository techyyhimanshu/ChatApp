<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Application</title>
  <!-- Bootstrap CSS -->
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .chat-section {
      height: 70vh;
      /* Adjust height as needed */
      overflow-y: scroll;
      /* Enable scrolling */
    }

    .user-item {
      cursor: pointer;
      /* Make user list items clickable */
    }

    .user-item.active {
      background-color: #f0f0f0;
      /* Highlight active user */
    }

    .message {
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 5px;
      max-width: 70%;
    }

    .message.sent {
      background-color: #d1ffd6;
      align-self: flex-end;
    }

    .message.received {
      background-color: #e6e6e6;
      align-self: flex-start;
    }
  </style>
</head>

<body>
  <div class="container-fluid">
    <!-- Navigation bar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">Chat App</a>
        <div class="navbar-text ml-auto">
          Logged in as: <strong><span id="loggedInUser"></span></strong>
        </div>
      </div>
    </nav>

    <!-- Main content area -->
    <div class="row mt-3">
      <!-- Left panel: All users -->
      <div class="col-md-4">
        <h4>All Users</h4>
        <ul id="userList" class="list-group">
          <!-- User list items will be populated dynamically -->
          <% users.forEach(user=> { %>
            <li class="list-group-item user-item" data-user-id="<%= user.id %>" data-user-name="<%= user.username %>">
              <%= user.username %>
            </li>
            <% }); %>
        </ul>
      </div>

      <!-- Right panel: Chat section -->
      <div class="col-md-8">
        <div class="card">
          <div class="card-header">
            Chat with: <strong id="chatUsername">Select a user</strong>
          </div>
          <div id="chatMessages" class="card-body chat-section d-flex flex-column">
            <!-- Chat messages will be appended here -->
          </div>
          <div class="card-footer">
            <form id="chatForm">
              <div class="input-group">
                <input type="hidden" id="senderId" value="<%= currentUser.id %>">
                <input type="hidden" id="recipientId" value="">
                <input type="text" id="messageInput" class="form-control" placeholder="Type a message...">
                <div class="input-group-append">
                  <button type="submit" class="btn btn-primary">Send</button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS (optional) -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"
    integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
  <!-- Socket.io -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const socket = io(); // Connect to Socket.io server
      const loggedInUser = '<%= currentUser.username %>'; // Replace with actual username from backend
      const loggedInUserId = '<%= currentUser.id %>'; // Replace with actual user ID from backend
      const userList = document.getElementById('userList');
      const chatUsername = document.getElementById('chatUsername');
      const chatMessages = document.getElementById('chatMessages');
      const messageForm = document.getElementById('chatForm');
      const messageInput = document.getElementById('messageInput');
      const senderIdInput = document.getElementById('senderId');
      const recipientIdInput = document.getElementById('recipientId');
      var recipientUser="";
      document.getElementById('loggedInUser').textContent = loggedInUser;

      // Emit 'register' event to server on connection
      socket.on('connect', () => {
        console.log('Connected to server');
        socket.emit('register', loggedInUserId);
      });

      // Handle 'receive message' event from server
      socket.on('receive message', (msg) => {
        appendMessage(msg);
      });

      // Handle form submission to send message
      messageForm.addEventListener('submit', function (event) {
        event.preventDefault();
        const content = messageInput.value.trim();
        const recipientId = recipientIdInput.value;
        if (content && recipientId) {
          const message = {
            senderId: loggedInUserId,
            recipientId: recipientId,
            content: content
          };
          socket.emit('send message', message);
          messageInput.value = '';
        } else {
          console.log('Invalid message or recipient ID');
        }
      });

      // Handle click on user item to start chat
      userList.addEventListener('click', function (event) {
        if (event.target && event.target.classList.contains('user-item')) {
          const userId = event.target.getAttribute('data-user-id');
          const username = event.target.textContent.trim();
          recipientUser=username
          chatUsername.textContent = username;
          recipientIdInput.value = userId; // Set recipient ID
          loadChatMessages(userId); // Load existing messages with selected user
          

          // Remove 'active' class from all user items
          userList.querySelectorAll('.user-item').forEach(item => {
            item.classList.remove('active');
          });

          // Add 'active' class to clicked user item
          event.target.classList.add('active');
        }
      });

      function loadChatMessages(recipientId) {
        fetch(`/api/messages/${loggedInUserId}/${recipientId}`)
          .then(response => response.json())
          .then(messages => {
            chatMessages.innerHTML = ''; // Clear current messages
            messages.forEach(message => {
              appendMessage(message);
            });
          })
          .catch(error => console.error('Error fetching messages:', error));
      }

      function appendMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message');
        if (message.userId == loggedInUserId || message.userid == loggedInUserId) {
          messageElement.textContent = `${loggedInUser}: ${message.content}`;
          messageElement.classList.add('sent');
          messageElement.style.alignSelf = 'flex-end';
        } else {
          console.log("else condition works");
          messageElement.textContent = `${recipientUser}: ${message.content}`;
          messageElement.classList.add('received');
          messageElement.style.alignSelf = 'flex-start';
        }

        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight; // Auto-scroll to the bottom
      }


      // function appendMessageImmediate(message) {
      //   const messageElement = document.createElement('div');
      //   messageElement.classList.add('message');
      //   messageElement.textContent = `${message.User.username}: ${message.content}`;
      //   messageElement.classList.add('sent');
      //   messageElement.style.alignSelf = 'flex-end';
      //   chatMessages.appendChild(messageElement);
      //   chatMessages.scrollTop = chatMessages.scrollHeight; // Auto-scroll to the bottom
      // }
    });

  </script>
</body>

</html>